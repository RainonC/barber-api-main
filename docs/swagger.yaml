openapi: 3.0.2
info:
  title: Barbers-API
  version: 1.0.0
  description: |
    ### This is a Swagger UI for our Barbers API
paths:
  /barber:
    get:
      tags:
        - barbers
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                List of Barbers:
                  value: |
                    - John Wick
                    - Will Smith
          description: 'Returns a list of barbers, kus barbers on vastav sinu API-le.'
      summary: Get list of barbers
      description: returns all list of barbers
    post:
      tags:
        - barbers
      requestBody:
        description: A new barber to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/error'
            examples:
              Parameters missing:
                value:
                  error: One or all parameters are missing
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/new-barber'
              examples:
                Barber that is added:
                  value:
                    name: "John Wick"
                    working_day: "Monday"
                    specialization: "Haircuts"
          description: New barber has been created.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: One or all parameters are missing
      summary: Create a barber into the API(either db or array)
      description: Creates a new barber
  '/barbers/{id}':
    get:
      tags:
        - details
      parameters:
        - examples:
            ID:
              value: '65'
          name: id
          description: ID of barber.
          schema:
            type: integer
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                Details of a barber:
                  value: |
                    { id: 1, name: "John Wick", working_day: "Monday", specialization: "Haircuts" }
          description: Return full details of a given id barber
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Game/w+ was not found:
                  value:
                    error: barber \w+ was not found in the game array.
          description: Game was not found in the games array.
      operationId: id
      summary: Returns full details of a given barber.
      description: Returns full details of a given barber, based on user input id by the user.

/users/register:
    post:
      tags:
        - users
      requestBody:
        description: User registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new-user'
            examples:
              Registration Example:
                value:
                  username: "john_doe"
                  password: "securepassword"
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/new-user'
              examples:
                User Registered:
                  value:
                    id: 1
                    username: "john_doe"
          description: User has been registered successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: One or all parameters are missing.

  /appointments:
    post:
      tags:
        - appointments
      requestBody:
        description: Create a new appointment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new-appointment'
            examples:
              Appointment Example:
                value:
                  barberID: 1
                  clientID: 1
                  day: "2024-01-20T12:00:00"
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/new-appointment'
              examples:
                Appointment Created:
                  value:
                    id: 1
                    barberID: 1
                    clientID: 1
                    day: "2024-01-20T12:00:00"
          description: New appointment has been created.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: One or all parameters are missing.


components:
  schemas:
    error:
      title: Root Type for error
      description: ''
      type: object
      properties:
        error:
          type: string
      example:
        error: Error message.
    new-game:
      title: Root Type for new-barber
      description: new barber object
      required:
        - name
        - working_day
        - specialization
      type: object
      properties:
        name:
          type: string
        price:
          format: double
          type: number
        rating:
          type: integer
      example:
        name: Lile
        working_day: Monday
        specialization: Haircut

         new-user:
      title: Root Type for new-user
      description: new user object
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      example:
        username: john_doe
        password: securepassword

    new-appointment:
      title: Root Type for new-appointment
      description: new appointment object
      required:
        - barberID
        - clientID
        - day
      type: object
      properties:
        barberID:
          type: integer
        clientID:
          type: integer
        day:
          type: string
          format: date-time
      example:
        barberID: 1
        clientID: 1
        day: "2024-01-20T12:00:00"
